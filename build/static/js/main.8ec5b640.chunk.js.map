{"version":3,"sources":["services/NoteService.js","components/Note.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","Note","key","note","toggleImportant","label","important","className","content","onClick","Notification","message","Footer","style","color","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","NoteService","initialNotes","notesToShow","filter","map","iterator","find","n","changedNote","catch","error","console","log","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","returnedNote","concat","setTimeout","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"gRACMA,EAAU,sDAcD,EAZA,WACX,OAAOC,IAAMC,IAAIF,GAASG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAWzC,EARA,SAAAC,GACX,OAAOL,IAAMM,KAAKP,EAASM,GAAWH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAOrD,EAJA,SAACG,EAAIF,GAChB,OAAOL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,ICA1BI,EAVF,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,IAAKC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,gBAChBC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACI,wBAAIJ,IAAOA,EAAKK,UAAY,QACvBJ,EAAKK,QACN,4BAAQC,QAAWL,GAAkBC,KCOlCK,EAZM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAe,OAAZA,EACQ,KAIP,yBAAKJ,UAAY,SACZI,ICUEC,EAjBA,WAMX,OACI,yBAAKC,MANW,CAChBC,MAAO,QACPC,SAAU,KAKN,6BACA,6BACA,6BACA,6BACA,kFAA6C,yGCsExCC,EA9EL,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,MAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAOdC,qBAAU,WACRC,IACGjC,MAAK,SAAAkC,GAAY,OAAIT,EAASS,QAEhC,IAEH,IAsCMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAA3B,GAAI,OAAIA,EAAKG,aAEhE,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcK,QAAWa,IACzB,6BACE,4BAAQf,QAAW,kBAAMc,GAAYD,KAArC,QACQA,EAAU,YAAa,QAGjC,4BACGO,EAAYE,KAAI,SAAC5B,EAAM6B,GAAP,OACjB,kBAAC,EAAD,CAAM9B,IAAO8B,EAAU7B,KAAQA,EAAMC,gBAAmB,kBA1BnC,SAACL,GAC1B,IAAMI,EAAOe,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAEnC,KAAOA,KAChCoC,EAAW,2BAAOhC,GAAP,IAAaG,WAAYH,EAAKG,YAE/CqB,EACU5B,EAAIoC,GACXzC,MAAK,SAAAC,GACJwB,EAASD,EAAMa,KAAI,SAAA5B,GAAI,OAAIA,EAAKJ,KAAOA,EAAKI,EAAOR,EAASC,YAE7DwC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,WAiBoCC,CAAmBrC,EAAKJ,WAGxF,0BAAM0C,SAtDM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBpC,QAASY,EACTyB,MAAM,IAAIC,MAAOC,cACjBzC,UAAW0C,KAAKC,SAAW,IAI7BtB,EACUiB,GACPlD,MAAK,SAAAwD,GACJ/B,EAASD,EAAMiC,OAAOD,IACtB7B,EAAW,IACXI,EAAgB,SAAD,OAAUyB,EAAa1C,QAAvB,yBACf4C,YAAW,kBAAM3B,EAAgB,QAAO,UAwCxC,2BACI4B,MAASjC,EACTkC,SAtCe,SAACZ,GACxBJ,QAAQC,IAAIG,EAAMa,OAAOF,OACzBhC,EAAWqB,EAAMa,OAAOF,UAqCpB,4BAAQG,KAAO,UAAf,SAEF,kBAAC,EAAD,Q,MCxERC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.8ec5b640.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'https://frozen-castle-60276.herokuapp.com/api/notes'\n\nconst getAll = () => {\n    return axios.get(baseUrl).then(response => response.data)\n}\n\nconst create = newObject => {\n    return axios.post(baseUrl, newObject).then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nexport default {\n    getAll: getAll,\n    create: create,\n    update: update\n}","import React from 'react'\n\nconst Note = ({key, note, toggleImportant}) => {\n    const label = note.important ? 'make not important' : 'make important'\n    return(\n        <li key = {key} className = 'note'>\n            {note.content}\n            <button onClick = {toggleImportant}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({message}) => {\n    if(message === null){\n        return null\n    }\n\n    return(\n        <div className = \"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontSize: 18\n    }\n\n    return(\n        <div style = {footerStyle}>\n            <br />\n            <br />\n            <br />\n            <br />\n            <p>Notes app, made with ðŸ’› by Aqib Ahmed for <em>FullStackOpen @ Department of Computer Science, University of Helsinki</em></p>\n        </div>\n    )\n}\n\nexport default Footer","import React, { useState, useEffect } from 'react'\nimport NoteService from './services/NoteService'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    //Loads JSON data into notes\n    useEffect(() => {\n      NoteService.getAll()\n        .then(initialNotes => setNotes(initialNotes))\n        }\n      ,[])\n      \n    const addNote = (event) => {\n      event.preventDefault()\n      const noteObject = {\n        content: newNote,\n        date: new Date().toISOString(),\n        important: Math.random() < 0.5,\n        //Its better to let the server generate ids\n      }\n      \n      NoteService\n        .create(noteObject)\n        .then(returnedNote => {\n          setNotes(notes.concat(returnedNote))\n          setNewNote('')\n          setErrorMessage(`Note \"${returnedNote.content}\" added to directory`)\n          setTimeout(() => setErrorMessage(null), 5000)\n        })\n    }\n\n    const handleNoteChange = (event) => {\n      console.log(event.target.value)\n      setNewNote(event.target.value)\n      \n    }\n\n    const toggleImportanceOf = (id) => {\n      const note = notes.find(n => n.id === id)\n      const changedNote = {...note, important: !note.important}\n\n      NoteService\n        .update(id, changedNote)\n        .then(response => {\n          setNotes(notes.map(note => note.id !== id ? note : response.data))\n        })\n        .catch(error => console.log('fail'))\n      }\n\n    //Determines whether all notes are shown or only the important ones\n    const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n    return (\n      <div>\n        <h1>Notes</h1>\n        <Notification message = {errorMessage}/>\n        <div>\n          <button onClick = {() => setShowAll(!showAll)}>\n            show {showAll ? 'important': 'all'}\n          </button>\n        </div>\n        <ul>\n          {notesToShow.map((note, iterator) => \n          <Note key = {iterator} note = {note} toggleImportant = {() => toggleImportanceOf(note.id)}/>\n        )}\n        </ul>\n        <form onSubmit = {addNote}>\n          <input \n              value = {newNote}\n              onChange = {handleNoteChange}/>\n          <button type = \"submit\">save</button>\n        </form>\n        <Footer />\n      </div>\n    )\n  }\n\n  export default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n///Everything rendered in this javascript files is imported from different modules stored in /src\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}